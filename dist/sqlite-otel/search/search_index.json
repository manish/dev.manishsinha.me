{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLite OTEL Collector Documentation","text":"<p>A standalone Go binary that functions as an OpenTelemetry collector service, designed to receive telemetry data and persist it to an embedded SQLite database.</p>"},{"location":"#features","title":"Features","text":"<p>Why Choose SQLite OTEL Collector?</p> <ul> <li> Single Binary - No external dependencies, embedded SQLite</li> <li> Lightweight - Minimal resource footprint for edge deployments  </li> <li> Secure by Default - Non-root execution with systemd hardening</li> <li> Full OTLP Support - Traces, metrics, and logs via OTLP/HTTP</li> <li> Log Rotation - Built-in rotation with compression</li> <li> Easy Deployment - Native packages for all platforms</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"DockerBinaryPackage Manager <pre><code># Run with Docker\ndocker run -d \\\n  --name sqlite-otel \\\n  -p 4318:4318 \\\n  -v sqlite-otel-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Send test data\ncurl -X POST http://localhost:4318/v1/traces \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"resourceSpans\": []}'\n</code></pre> <pre><code># Download latest release\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-linux-amd64\nchmod +x sqlite-otel-linux-amd64\nsudo mv sqlite-otel-linux-amd64 /usr/local/bin/sqlite-otel\n\n# Run collector\nsqlite-otel\n</code></pre> <pre><code># Ubuntu/Debian\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector_amd64.deb\nsudo dpkg -i sqlite-otel-collector_amd64.deb\n\n# RHEL/CentOS/Fedora\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector-amd64.rpm\nsudo rpm -ivh sqlite-otel-collector-amd64.rpm\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[Your Applications&lt;br/&gt;OpenTelemetry SDKs] --&gt; B[SQLite OTEL Collector&lt;br/&gt;:4318]\n    B --&gt; C[SQLite Database&lt;br/&gt;Local Storage]\n\n    style B fill:#e1f5fe\n    style C fill:#f3e5f5\n</code></pre> <p>Your applications send telemetry data via OTLP/HTTP to the collector, which immediately persists it to the embedded SQLite database.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Download and install the collector</li> <li>Quick Start - Get up and running in 5 minutes</li> <li>Configuration - Customize the collector settings</li> <li>CLI Reference - Command-line options and flags</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>The SQLite OTEL Collector implements the OpenTelemetry Protocol (OTLP) over HTTP for receiving telemetry data.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:4318\n</code></pre>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#health-check","title":"Health Check","text":""},{"location":"api/#get-health","title":"<code>GET /health</code>","text":"<p>Health check endpoint to verify the collector is running.</p> <p>Response: <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\n\nOK\n</code></pre></p> <p>Example: <pre><code>curl http://localhost:4318/health\n</code></pre></p>"},{"location":"api/#traces","title":"Traces","text":""},{"location":"api/#post-v1traces","title":"<code>POST /v1/traces</code>","text":"<p>Accepts trace data in OTLP format.</p> <p>Content-Type: <code>application/json</code> or <code>application/x-protobuf</code></p> <p>Request Body: OTLP TracesData</p> <p>Example Request: <pre><code>curl -X POST http://localhost:4318/v1/traces \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resourceSpans\": [{\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"service.name\",\n            \"value\": {\"stringValue\": \"my-service\"}\n          }\n        ]\n      },\n      \"scopeSpans\": [{\n        \"spans\": [{\n          \"traceId\": \"0123456789abcdef0123456789abcdef\",\n          \"spanId\": \"0123456789abcdef\", \n          \"name\": \"my-operation\",\n          \"kind\": 1,\n          \"startTimeUnixNano\": \"1640995200000000000\",\n          \"endTimeUnixNano\": \"1640995201000000000\",\n          \"attributes\": [\n            {\n              \"key\": \"http.method\",\n              \"value\": {\"stringValue\": \"GET\"}\n            }\n          ]\n        }]\n      }]\n    }]\n  }'\n</code></pre></p> <p>Response: <pre><code>HTTP/1.1 200 OK\n</code></pre></p>"},{"location":"api/#metrics","title":"Metrics","text":""},{"location":"api/#post-v1metrics","title":"<code>POST /v1/metrics</code>","text":"<p>Accepts metrics data in OTLP format.</p> <p>Content-Type: <code>application/json</code> or <code>application/x-protobuf</code></p> <p>Request Body: OTLP MetricsData</p> <p>Example Request: <pre><code>curl -X POST http://localhost:4318/v1/metrics \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resourceMetrics\": [{\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"service.name\",\n            \"value\": {\"stringValue\": \"my-service\"}\n          }\n        ]\n      },\n      \"scopeMetrics\": [{\n        \"metrics\": [{\n          \"name\": \"requests_total\",\n          \"description\": \"Total number of requests\",\n          \"unit\": \"1\",\n          \"sum\": {\n            \"dataPoints\": [{\n              \"attributes\": [\n                {\n                  \"key\": \"status\",\n                  \"value\": {\"stringValue\": \"200\"}\n                }\n              ],\n              \"asInt\": \"42\",\n              \"timeUnixNano\": \"1640995200000000000\"\n            }],\n            \"aggregationTemporality\": 2,\n            \"isMonotonic\": true\n          }\n        }]\n      }]\n    }]\n  }'\n</code></pre></p> <p>Response: <pre><code>HTTP/1.1 200 OK\n</code></pre></p>"},{"location":"api/#logs","title":"Logs","text":""},{"location":"api/#post-v1logs","title":"<code>POST /v1/logs</code>","text":"<p>Accepts log data in OTLP format.</p> <p>Content-Type: <code>application/json</code> or <code>application/x-protobuf</code></p> <p>Request Body: OTLP LogsData</p> <p>Example Request: <pre><code>curl -X POST http://localhost:4318/v1/logs \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resourceLogs\": [{\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"service.name\",\n            \"value\": {\"stringValue\": \"my-service\"}\n          }\n        ]\n      },\n      \"scopeLogs\": [{\n        \"logRecords\": [{\n          \"timeUnixNano\": \"1640995200000000000\",\n          \"severityNumber\": 9,\n          \"severityText\": \"INFO\",\n          \"body\": {\n            \"stringValue\": \"User logged in successfully\"\n          },\n          \"attributes\": [\n            {\n              \"key\": \"user.id\",\n              \"value\": {\"stringValue\": \"12345\"}\n            }\n          ]\n        }]\n      }]\n    }]\n  }'\n</code></pre></p> <p>Response: <pre><code>HTTP/1.1 200 OK\n</code></pre></p>"},{"location":"api/#data-storage","title":"Data Storage","text":"<p>All received telemetry data is stored in SQLite with the following schema:</p>"},{"location":"api/#spans-table","title":"Spans Table","text":"<pre><code>CREATE TABLE spans (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  trace_id TEXT NOT NULL,\n  span_id TEXT NOT NULL,\n  parent_span_id TEXT,\n  name TEXT NOT NULL,\n  kind INTEGER,\n  start_time INTEGER,\n  end_time INTEGER,\n  duration INTEGER,\n  service_name TEXT,\n  service_version TEXT,\n  status_code INTEGER,\n  status_message TEXT,\n  attributes TEXT, -- JSON\n  events TEXT,     -- JSON\n  links TEXT,      -- JSON\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n\n  UNIQUE(trace_id, span_id)\n);\n</code></pre>"},{"location":"api/#metrics-table","title":"Metrics Table","text":"<pre><code>CREATE TABLE metrics (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL,\n  description TEXT,\n  unit TEXT,\n  type TEXT, -- gauge, counter, histogram, summary\n  value REAL,\n  value_int INTEGER,\n  timestamp INTEGER,\n  service_name TEXT,\n  service_version TEXT,\n  attributes TEXT, -- JSON\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"api/#logs-table","title":"Logs Table","text":"<pre><code>CREATE TABLE logs (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  timestamp INTEGER,\n  severity_number INTEGER,\n  severity_text TEXT,\n  body TEXT,\n  service_name TEXT,\n  service_version TEXT,\n  trace_id TEXT,\n  span_id TEXT,\n  attributes TEXT, -- JSON\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"api/#error-responses","title":"Error Responses","text":""},{"location":"api/#400-bad-request","title":"400 Bad Request","text":"<p>Invalid request format or malformed OTLP data.</p> <pre><code>{\n  \"error\": \"Invalid OTLP data format\",\n  \"details\": \"Missing required field: resourceSpans\"\n}\n</code></pre>"},{"location":"api/#413-payload-too-large","title":"413 Payload Too Large","text":"<p>Request body exceeds maximum size limit.</p> <pre><code>{\n  \"error\": \"Request too large\",\n  \"details\": \"Maximum request size is 10MB\"\n}\n</code></pre>"},{"location":"api/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Database or server error.</p> <pre><code>{\n  \"error\": \"Internal server error\",\n  \"details\": \"Database write failed\"\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>Currently, no rate limiting is implemented. For production deployments, consider:</p> <ul> <li>Using a reverse proxy (nginx, Apache) with rate limiting</li> <li>Implementing network-level rate limiting</li> <li>Monitoring resource usage</li> </ul>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The collector currently does not implement authentication. For production:</p> <ul> <li>Deploy behind a reverse proxy with authentication</li> <li>Use network-level security (VPN, private networks)</li> <li>Implement firewall rules</li> </ul>"},{"location":"api/#sdk-configuration","title":"SDK Configuration","text":"<p>Configure your OpenTelemetry SDKs to send data to the collector:</p>"},{"location":"api/#environment-variables","title":"Environment Variables","text":"<pre><code>export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n</code></pre>"},{"location":"api/#go-sdk","title":"Go SDK","text":"<pre><code>import (\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n    \"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp\"\n)\n\n// Trace exporter\ntraceExporter, err := otlptracehttp.New(\n    context.Background(),\n    otlptracehttp.WithEndpoint(\"http://localhost:4318\"),\n    otlptracehttp.WithInsecure(),\n)\n\n// Metric exporter  \nmetricExporter, err := otlpmetrichttp.New(\n    context.Background(),\n    otlpmetrichttp.WithEndpoint(\"http://localhost:4318\"),\n    otlpmetrichttp.WithInsecure(),\n)\n</code></pre>"},{"location":"api/#python-sdk","title":"Python SDK","text":"<pre><code>from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter\n\n# Trace exporter\ntrace_exporter = OTLPSpanExporter(\n    endpoint=\"http://localhost:4318/v1/traces\"\n)\n\n# Metric exporter\nmetric_exporter = OTLPMetricExporter(\n    endpoint=\"http://localhost:4318/v1/metrics\"\n)\n</code></pre>"},{"location":"api/#java-sdk","title":"Java SDK","text":"<pre><code>import io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;\nimport io.opentelemetry.exporter.otlp.http.metrics.OtlpHttpMetricExporter;\n\n// Trace exporter\nOtlpHttpSpanExporter traceExporter = OtlpHttpSpanExporter.builder()\n    .setEndpoint(\"http://localhost:4318/v1/traces\")\n    .build();\n\n// Metric exporter\nOtlpHttpMetricExporter metricExporter = OtlpHttpMetricExporter.builder()\n    .setEndpoint(\"http://localhost:4318/v1/metrics\")\n    .build();\n</code></pre>"},{"location":"api/#nodejs-sdk","title":"Node.js SDK","text":"<pre><code>const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-http');\nconst { OTLPMetricExporter } = require('@opentelemetry/exporter-otlp-http');\n\n// Trace exporter\nconst traceExporter = new OTLPTraceExporter({\n  url: 'http://localhost:4318/v1/traces',\n});\n\n// Metric exporter\nconst metricExporter = new OTLPMetricExporter({\n  url: 'http://localhost:4318/v1/metrics',\n});\n</code></pre>"},{"location":"api/#query-examples","title":"Query Examples","text":"<p>Access the SQLite database directly to query your data:</p>"},{"location":"api/#recent-traces","title":"Recent Traces","text":"<pre><code>SELECT \n  trace_id,\n  name,\n  service_name,\n  duration,\n  datetime(start_time/1000000000, 'unixepoch') as start_time\nFROM spans \nWHERE start_time &gt; (strftime('%s', 'now') - 3600) * 1000000000\nORDER BY start_time DESC\nLIMIT 20;\n</code></pre>"},{"location":"api/#error-spans","title":"Error Spans","text":"<pre><code>SELECT \n  trace_id,\n  span_id,\n  name,\n  service_name,\n  status_message\nFROM spans \nWHERE status_code &gt; 0\nORDER BY start_time DESC;\n</code></pre>"},{"location":"api/#metrics-by-service","title":"Metrics by Service","text":"<pre><code>SELECT \n  service_name,\n  name,\n  AVG(value) as avg_value,\n  COUNT(*) as count\nFROM metrics \nWHERE timestamp &gt; (strftime('%s', 'now') - 3600) * 1000000000\nGROUP BY service_name, name\nORDER BY service_name, name;\n</code></pre>"},{"location":"api/#see-also","title":"See Also","text":"<ul> <li>OpenTelemetry Protocol Specification</li> <li>Quick Start Guide - Getting started</li> <li>Configuration - Collector configuration</li> </ul>"},{"location":"cli/","title":"CLI Reference","text":"<p>Complete command-line interface reference for the SQLite OTEL Collector.</p>"},{"location":"cli/#synopsis","title":"Synopsis","text":"<pre><code>sqlite-otel [OPTIONS]\n</code></pre>"},{"location":"cli/#options","title":"Options","text":""},{"location":"cli/#core-options","title":"Core Options","text":""},{"location":"cli/#-port","title":"<code>-port</code>","text":"<p>Type: Integer Default: <code>4318</code> Description: Port number for the OTLP HTTP server to listen on.</p> <pre><code>sqlite-otel -port 9090\n</code></pre>"},{"location":"cli/#-db-path","title":"<code>-db-path</code>","text":"<p>Type: String Default: Auto-detected based on execution context Description: Path to the SQLite database file.</p> <pre><code>sqlite-otel -db-path /data/telemetry.db\n</code></pre> <p>Auto-detection rules: - User mode: <code>~/.local/share/sqlite-otel/otel-collector.db</code> - Service mode: <code>/var/lib/sqlite-otel-collector/otel-collector.db</code></p>"},{"location":"cli/#logging-options","title":"Logging Options","text":""},{"location":"cli/#-log-file","title":"<code>-log-file</code>","text":"<p>Type: String Default: Auto-detected based on execution context Description: Path to the log file for execution metadata.</p> <pre><code>sqlite-otel -log-file /var/log/my-collector.log\n</code></pre> <p>Auto-detection rules: - User mode: <code>~/.local/state/sqlite-otel/execution.log</code> - Service mode: <code>/var/log/sqlite-otel-collector.log</code></p>"},{"location":"cli/#-log-max-size","title":"<code>-log-max-size</code>","text":"<p>Type: Integer Default: <code>100</code> Description: Maximum size of log file in MB before rotation.</p> <pre><code>sqlite-otel -log-max-size 50\n</code></pre>"},{"location":"cli/#-log-max-backups","title":"<code>-log-max-backups</code>","text":"<p>Type: Integer Default: <code>7</code> Description: Maximum number of old log files to keep.</p> <pre><code>sqlite-otel -log-max-backups 3\n</code></pre>"},{"location":"cli/#-log-max-age","title":"<code>-log-max-age</code>","text":"<p>Type: Integer Default: <code>30</code> Description: Maximum number of days to keep old log files.</p> <pre><code>sqlite-otel -log-max-age 14\n</code></pre>"},{"location":"cli/#-log-compress","title":"<code>-log-compress</code>","text":"<p>Type: Boolean Default: <code>true</code> Description: Compress rotated log files using gzip.</p> <pre><code>sqlite-otel -log-compress=false\n</code></pre>"},{"location":"cli/#utility-options","title":"Utility Options","text":""},{"location":"cli/#-version","title":"<code>-version</code>","text":"<p>Type: Flag Description: Display version information and exit.</p> <pre><code>sqlite-otel -version\n</code></pre> <p>Output example: <pre><code>sqlite-otel-collector v0.7.95\nBuild Time: 2025-06-22_12:34:56\nGit Commit: abc1234\n</code></pre></p>"},{"location":"cli/#-h-help","title":"<code>-h</code>, <code>-help</code>","text":"<p>Type: Flag Description: Display help information and exit.</p> <pre><code>sqlite-otel -h\nsqlite-otel -help\n</code></pre>"},{"location":"cli/#usage-examples","title":"Usage Examples","text":""},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code># Start with defaults (port 4318, auto-detected paths)\nsqlite-otel\n\n# Start on custom port\nsqlite-otel -port 8080\n\n# Start with custom database\nsqlite-otel -db-path ./my-data.db\n</code></pre>"},{"location":"cli/#production-configuration","title":"Production Configuration","text":"<pre><code># Full production configuration\nsqlite-otel \\\n  -port 4318 \\\n  -db-path /opt/telemetry/collector.db \\\n  -log-file /var/log/sqlite-otel/collector.log \\\n  -log-max-size 100 \\\n  -log-max-backups 10 \\\n  -log-max-age 90 \\\n  -log-compress=true\n</code></pre>"},{"location":"cli/#development-configuration","title":"Development Configuration","text":"<pre><code># Development setup with local paths\nsqlite-otel \\\n  -port 4318 \\\n  -db-path ./dev-data.db \\\n  -log-file ./dev.log \\\n  -log-max-size 10 \\\n  -log-max-backups 2\n</code></pre>"},{"location":"cli/#minimal-resource-configuration","title":"Minimal Resource Configuration","text":"<pre><code># For resource-constrained environments\nsqlite-otel \\\n  -port 4318 \\\n  -log-max-size 5 \\\n  -log-max-backups 1 \\\n  -log-max-age 3 \\\n  -log-compress=true\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"Code Description <code>0</code> Success <code>1</code> General error <code>2</code> Invalid command-line arguments <code>3</code> Database initialization error <code>4</code> Server startup error <code>5</code> Permission denied"},{"location":"cli/#signal-handling","title":"Signal Handling","text":"<p>The collector handles the following signals gracefully:</p>"},{"location":"cli/#sigterm","title":"SIGTERM","text":"<p>Graceful shutdown - closes database connections and stops the server.</p> <pre><code># Send graceful shutdown signal\nkill -TERM &lt;pid&gt;\n</code></pre>"},{"location":"cli/#sigint-ctrlc","title":"SIGINT (Ctrl+C)","text":"<p>Immediate shutdown - same as SIGTERM but triggered by Ctrl+C.</p>"},{"location":"cli/#sigusr1","title":"SIGUSR1","text":"<p>Log rotation trigger - forces log rotation immediately.</p> <pre><code># Force log rotation\nkill -USR1 &lt;pid&gt;\n</code></pre>"},{"location":"cli/#environment-context-detection","title":"Environment Context Detection","text":"<p>The collector automatically detects its execution context:</p>"},{"location":"cli/#user-mode-detection","title":"User Mode Detection","text":"<ul> <li>Not running under systemd</li> <li>No special privileges</li> <li>Uses XDG Base Directory specification</li> </ul>"},{"location":"cli/#service-mode-detection","title":"Service Mode Detection","text":"<ul> <li>Running under systemd (detected via <code>INVOCATION_ID</code> environment variable)</li> <li>Typically running as dedicated user</li> <li>Uses system-wide paths</li> </ul>"},{"location":"cli/#validation","title":"Validation","text":""},{"location":"cli/#path-validation","title":"Path Validation","text":"<p>The collector validates all file paths on startup:</p> <ul> <li>Database path: Must be writable directory</li> <li>Log path: Must be writable directory</li> <li>File permissions: Checks read/write access</li> </ul>"},{"location":"cli/#port-validation","title":"Port Validation","text":"<ul> <li>Must be between 1 and 65535</li> <li>Must not be already in use</li> <li>Must be accessible (not blocked by firewall)</li> </ul>"},{"location":"cli/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Test configuration without starting server\nsqlite-otel -port 4318 -db-path /test/path.db\n# Will exit with error if path is not accessible\n</code></pre>"},{"location":"cli/#docker-usage","title":"Docker Usage","text":"<p>When running in Docker, pass CLI arguments to the container:</p> <pre><code># Basic Docker usage\ndocker run -p 4318:4318 ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Docker with custom arguments\ndocker run -p 9090:9090 \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -port 9090 -log-max-size 25\n\n# Docker with volume mounts\ndocker run -p 4318:4318 \\\n  -v $(pwd)/data:/data \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -db-path /data/collector.db\n</code></pre>"},{"location":"cli/#systemd-integration","title":"Systemd Integration","text":"<p>When installed as a systemd service, arguments are configured in the service file:</p> <pre><code>[Unit]\nDescription=SQLite OpenTelemetry Collector\nAfter=network.target\n\n[Service]\nType=simple\nUser=sqlite-otel\nExecStart=/usr/bin/sqlite-otel-collector -port 4318\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Override with systemctl:</p> <pre><code># Edit service configuration\nsudo systemctl edit sqlite-otel-collector\n\n# Add custom configuration\n[Service]\nExecStart=\nExecStart=/usr/bin/sqlite-otel-collector -port 4318 -log-max-size 50\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#common-issues","title":"Common Issues","text":"<p>Port already in use: <pre><code>sqlite-otel -port 4319  # Use different port\n</code></pre></p> <p>Permission denied: <pre><code># Check path permissions\nls -la /path/to/database/\n# Ensure user has write access\n</code></pre></p> <p>Database locked: <pre><code># Check for other processes using the database\nlsof /path/to/database.db\n</code></pre></p>"},{"location":"cli/#debugging","title":"Debugging","text":"<p>Enable verbose logging by examining the log file:</p> <pre><code># Follow logs in real-time\ntail -f ~/.local/state/sqlite-otel/execution.log\n\n# Or for systemd service\nsudo journalctl -u sqlite-otel-collector -f\n</code></pre>"},{"location":"cli/#see-also","title":"See Also","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Quick Start - Getting started guide  </li> <li>API Reference - OTLP endpoint documentation</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Configure the SQLite OTEL Collector to suit your specific needs.</p>"},{"location":"configuration/#command-line-options","title":"Command Line Options","text":"<p>The collector can be configured using command-line flags:</p> Flag Description Default Example <code>-port</code> Port to listen on <code>4318</code> <code>-port 9090</code> <code>-db-path</code> SQLite database file path Auto-detected <code>-db-path ./data.db</code> <code>-log-file</code> Log file path Auto-detected <code>-log-file ./app.log</code> <code>-log-max-size</code> Max log file size (MB) <code>100</code> <code>-log-max-size 50</code> <code>-log-max-backups</code> Max number of log backups <code>7</code> <code>-log-max-backups 3</code> <code>-log-max-age</code> Max log file age (days) <code>30</code> <code>-log-max-age 14</code> <code>-log-compress</code> Compress rotated logs <code>true</code> <code>-log-compress=false</code> <code>-version</code> Show version and exit - <code>-version</code>"},{"location":"configuration/#path-detection","title":"Path Detection","text":"<p>The collector automatically detects appropriate paths based on the execution context:</p>"},{"location":"configuration/#user-mode-default","title":"User Mode (Default)","text":"<ul> <li>Database: <code>~/.local/share/sqlite-otel/otel-collector.db</code></li> <li>Logs: <code>~/.local/state/sqlite-otel/execution.log</code></li> </ul>"},{"location":"configuration/#service-mode-systemd","title":"Service Mode (systemd)","text":"<ul> <li>Database: <code>/var/lib/sqlite-otel-collector/otel-collector.db</code></li> <li>Logs: <code>/var/log/sqlite-otel-collector.log</code></li> </ul>"},{"location":"configuration/#examples","title":"Examples","text":""},{"location":"configuration/#basic-usage","title":"Basic Usage","text":"<pre><code># Default configuration\nsqlite-otel\n\n# Custom port\nsqlite-otel -port 8080\n\n# Custom database location\nsqlite-otel -db-path /data/telemetry.db\n</code></pre>"},{"location":"configuration/#production-configuration","title":"Production Configuration","text":"<pre><code># Production setup with custom paths and log rotation\nsqlite-otel \\\n  -port 4318 \\\n  -db-path /opt/telemetry/data.db \\\n  -log-file /var/log/sqlite-otel/collector.log \\\n  -log-max-size 50 \\\n  -log-max-backups 10 \\\n  -log-max-age 90 \\\n  -log-compress=true\n</code></pre>"},{"location":"configuration/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Docker with environment variables\ndocker run -d \\\n  --name sqlite-otel \\\n  -p 4318:4318 \\\n  -v sqlite-data:/var/lib/sqlite-otel-collector \\\n  -v sqlite-logs:/var/log \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -log-max-size 25 \\\n  -log-max-backups 5\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>While the collector primarily uses command-line flags, you can set some environment variables for container deployments:</p> <pre><code># Set in Docker or Kubernetes\nexport SQLITE_OTEL_PORT=4318\nexport SQLITE_OTEL_DB_PATH=/data/collector.db\n</code></pre>"},{"location":"configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"configuration/#sqlite-settings","title":"SQLite Settings","text":"<p>The collector automatically configures SQLite with optimal settings:</p> <ul> <li>WAL Mode: Enabled for better concurrency</li> <li>Synchronous: NORMAL for balance of safety and performance  </li> <li>Journal Mode: WAL (Write-Ahead Logging)</li> <li>Foreign Keys: Enabled for data integrity</li> </ul>"},{"location":"configuration/#schema-overview","title":"Schema Overview","text":"<p>The collector creates these tables automatically:</p> <pre><code>-- Traces and spans\nCREATE TABLE spans (\n  trace_id TEXT,\n  span_id TEXT,\n  parent_span_id TEXT,\n  name TEXT,\n  kind INTEGER,\n  start_time INTEGER,\n  end_time INTEGER,\n  service_name TEXT,\n  attributes TEXT -- JSON\n);\n\n-- Metrics\nCREATE TABLE metrics (\n  name TEXT,\n  description TEXT,\n  unit TEXT,\n  type TEXT,\n  value REAL,\n  timestamp INTEGER,\n  service_name TEXT,\n  attributes TEXT -- JSON\n);\n\n-- Logs\nCREATE TABLE logs (\n  timestamp INTEGER,\n  severity TEXT,\n  body TEXT,\n  service_name TEXT,\n  trace_id TEXT,\n  span_id TEXT,\n  attributes TEXT -- JSON\n);\n</code></pre>"},{"location":"configuration/#log-rotation","title":"Log Rotation","text":"<p>The collector includes built-in log rotation to manage disk usage:</p>"},{"location":"configuration/#rotation-triggers","title":"Rotation Triggers","text":"<ul> <li>Size-based: When log file exceeds <code>log-max-size</code> MB</li> <li>Time-based: Checked daily, removes files older than <code>log-max-age</code> days</li> <li>Count-based: Keeps only <code>log-max-backups</code> old files</li> </ul>"},{"location":"configuration/#rotation-behavior","title":"Rotation Behavior","text":"<pre><code># Example log rotation\ncollector.log          # Current log\ncollector.log.1         # Previous log (compressed if enabled)\ncollector.log.2.gz      # Older log (compressed)\ncollector.log.3.gz      # Oldest kept log\n</code></pre>"},{"location":"configuration/#disable-rotation","title":"Disable Rotation","text":"<pre><code># Disable rotation (not recommended for production)\nsqlite-otel \\\n  -log-max-size 0 \\\n  -log-max-backups 0 \\\n  -log-max-age 0\n</code></pre>"},{"location":"configuration/#performance-tuning","title":"Performance Tuning","text":""},{"location":"configuration/#for-high-volume-deployments","title":"For High-Volume Deployments","text":"<pre><code># Optimized for high throughput\nsqlite-otel \\\n  -port 4318 \\\n  -db-path /fast-storage/telemetry.db \\\n  -log-max-size 200 \\\n  -log-max-backups 3\n</code></pre>"},{"location":"configuration/#for-resource-constrained-environments","title":"For Resource-Constrained Environments","text":"<pre><code># Minimal resource usage\nsqlite-otel \\\n  -port 4318 \\\n  -log-max-size 10 \\\n  -log-max-backups 2 \\\n  -log-max-age 7\n</code></pre>"},{"location":"configuration/#security-considerations","title":"Security Considerations","text":""},{"location":"configuration/#file-permissions","title":"File Permissions","text":"<p>Ensure proper file permissions:</p> <pre><code># Set secure permissions for database\nchmod 600 /path/to/database.db\nchown sqlite-otel:sqlite-otel /path/to/database.db\n\n# Set secure permissions for logs\nchmod 640 /path/to/collector.log\nchown sqlite-otel:adm /path/to/collector.log\n</code></pre>"},{"location":"configuration/#network-security","title":"Network Security","text":"<pre><code># Bind to specific interface (not all interfaces)\n# Note: Currently binds to all interfaces (0.0.0.0)\n# Consider using firewall rules or reverse proxy for additional security\n</code></pre>"},{"location":"configuration/#systemd-service-configuration","title":"Systemd Service Configuration","text":"<p>When installed via package manager, edit the systemd service:</p> <pre><code># Edit service configuration\nsudo systemctl edit sqlite-otel-collector\n\n# Add override configuration\n[Service]\nExecStart=\nExecStart=/usr/bin/sqlite-otel-collector -port 4318 -log-max-size 50\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Validate your configuration before deployment:</p> <pre><code># Test configuration\nsqlite-otel -version\n\n# Test with dry-run (check paths are accessible)\nsqlite-otel -db-path /test/path.db\n# Should fail if path is not writable\n</code></pre>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>CLI Reference - Complete command-line reference</li> <li>Deployment Guide - Production deployment strategies  </li> <li>API Reference - OTLP endpoint documentation</li> </ul>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>Production deployment strategies for the SQLite OTEL Collector.</p>"},{"location":"deployment/#overview","title":"Overview","text":"<p>The SQLite OTEL Collector can be deployed in various ways depending on your infrastructure and requirements:</p> <ul> <li>Standalone Binary - Direct installation on servers</li> <li>Docker - Containerized deployment</li> <li>Systemd Service - Linux service with package management</li> <li>Kubernetes - Container orchestration</li> <li>Edge Deployment - IoT and edge computing scenarios</li> </ul>"},{"location":"deployment/#standalone-binary-deployment","title":"Standalone Binary Deployment","text":""},{"location":"deployment/#system-requirements","title":"System Requirements","text":"<p>Minimum: - 64MB RAM - 10MB disk space + storage for telemetry data - Network connectivity on chosen port</p> <p>Recommended: - 256MB RAM - 1GB+ disk space for telemetry data - Dedicated user account</p>"},{"location":"deployment/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Download the binary: <pre><code># Download for your platform\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-linux-amd64\nchmod +x sqlite-otel-linux-amd64\nsudo mv sqlite-otel-linux-amd64 /usr/local/bin/sqlite-otel\n</code></pre></p> </li> <li> <p>Create dedicated user: <pre><code>sudo useradd --system --shell /bin/false --home /var/lib/sqlite-otel sqlite-otel\nsudo mkdir -p /var/lib/sqlite-otel\nsudo chown sqlite-otel:sqlite-otel /var/lib/sqlite-otel\n</code></pre></p> </li> <li> <p>Create systemd service: <pre><code>sudo tee /etc/systemd/system/sqlite-otel.service &lt;&lt; EOF\n[Unit]\nDescription=SQLite OpenTelemetry Collector\nAfter=network.target\n\n[Service]\nType=simple\nUser=sqlite-otel\nGroup=sqlite-otel\nExecStart=/usr/local/bin/sqlite-otel -port 4318 -db-path /var/lib/sqlite-otel/collector.db\nRestart=always\nRestartSec=5\n\n# Security hardening\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/var/lib/sqlite-otel /var/log\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre></p> </li> <li> <p>Start the service: <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable sqlite-otel\nsudo systemctl start sqlite-otel\n</code></pre></p> </li> </ol>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#basic-docker-deployment","title":"Basic Docker Deployment","text":"<pre><code># Create persistent volume\ndocker volume create sqlite-otel-data\n\n# Run container\ndocker run -d \\\n  --name sqlite-otel \\\n  --restart unless-stopped \\\n  -p 4318:4318 \\\n  -v sqlite-otel-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n</code></pre>"},{"location":"deployment/#docker-compose","title":"Docker Compose","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  sqlite-otel:\n    image: ghcr.io/redshiftvelocity/sqlite-otel:latest\n    container_name: sqlite-otel\n    restart: unless-stopped\n    ports:\n      - \"4318:4318\"\n    volumes:\n      - sqlite-otel-data:/var/lib/sqlite-otel-collector\n      - ./logs:/var/log/sqlite-otel\n    environment:\n      - TZ=UTC\n    command: [\n      \"-port\", \"4318\",\n      \"-log-max-size\", \"50\",\n      \"-log-max-backups\", \"5\"\n    ]\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:4318/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  sqlite-otel-data:\n</code></pre> <p>Start with: <pre><code>docker-compose up -d\n</code></pre></p>"},{"location":"deployment/#production-docker-configuration","title":"Production Docker Configuration","text":"<pre><code># Production deployment with resource limits\ndocker run -d \\\n  --name sqlite-otel-prod \\\n  --restart unless-stopped \\\n  --memory=512m \\\n  --cpus=1.0 \\\n  -p 4318:4318 \\\n  -v /opt/telemetry/data:/var/lib/sqlite-otel-collector \\\n  -v /opt/telemetry/logs:/var/log/sqlite-otel \\\n  --user 1000:1000 \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -port 4318 \\\n  -log-max-size 100 \\\n  -log-max-backups 10 \\\n  -log-max-age 30\n</code></pre>"},{"location":"deployment/#package-management-deployment","title":"Package Management Deployment","text":""},{"location":"deployment/#debianubuntu-deb","title":"Debian/Ubuntu (.deb)","text":"<pre><code># Download and install\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector_amd64.deb\nsudo dpkg -i sqlite-otel-collector_amd64.deb\n\n# Service is automatically installed and configured\nsudo systemctl status sqlite-otel-collector\n</code></pre>"},{"location":"deployment/#rhelcentosfedora-rpm","title":"RHEL/CentOS/Fedora (.rpm)","text":"<pre><code># Download and install\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector-amd64.rpm\nsudo rpm -ivh sqlite-otel-collector-amd64.rpm\n\n# Service is automatically installed and configured\nsudo systemctl status sqlite-otel-collector\n</code></pre>"},{"location":"deployment/#service-configuration","title":"Service Configuration","text":"<p>Override default settings: <pre><code># Create override directory\nsudo mkdir -p /etc/systemd/system/sqlite-otel-collector.service.d\n\n# Create override configuration\nsudo tee /etc/systemd/system/sqlite-otel-collector.service.d/override.conf &lt;&lt; EOF\n[Service]\nExecStart=\nExecStart=/usr/bin/sqlite-otel-collector -port 4318 -log-max-size 50\nEOF\n\n# Reload and restart\nsudo systemctl daemon-reload\nsudo systemctl restart sqlite-otel-collector\n</code></pre></p>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/#basic-kubernetes-deployment","title":"Basic Kubernetes Deployment","text":"<pre><code># k8s-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sqlite-otel\n  labels:\n    app: sqlite-otel\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sqlite-otel\n  template:\n    metadata:\n      labels:\n        app: sqlite-otel\n    spec:\n      containers:\n      - name: sqlite-otel\n        image: ghcr.io/redshiftvelocity/sqlite-otel:latest\n        ports:\n        - containerPort: 4318\n        args:\n        - \"-port\"\n        - \"4318\"\n        - \"-log-max-size\"\n        - \"25\"\n        volumeMounts:\n        - name: data-volume\n          mountPath: /var/lib/sqlite-otel-collector\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 4318\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 4318\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: sqlite-otel-pvc\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: sqlite-otel-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: sqlite-otel-service\nspec:\n  selector:\n    app: sqlite-otel\n  ports:\n  - port: 4318\n    targetPort: 4318\n  type: ClusterIP\n</code></pre> <p>Deploy: <pre><code>kubectl apply -f k8s-deployment.yaml\n</code></pre></p>"},{"location":"deployment/#production-kubernetes-with-configmap","title":"Production Kubernetes with ConfigMap","text":"<pre><code># k8s-production.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sqlite-otel-config\ndata:\n  collector.args: |\n    -port\n    4318\n    -log-max-size\n    50\n    -log-max-backups\n    7\n    -log-max-age\n    30\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sqlite-otel-prod\n  labels:\n    app: sqlite-otel\n    environment: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sqlite-otel\n  template:\n    metadata:\n      labels:\n        app: sqlite-otel\n    spec:\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        fsGroup: 1000\n      containers:\n      - name: sqlite-otel\n        image: ghcr.io/redshiftvelocity/sqlite-otel:latest\n        ports:\n        - containerPort: 4318\n        command: [\"/usr/bin/sqlite-otel\"]\n        args:\n        - \"-port\"\n        - \"4318\"\n        - \"-log-max-size\"\n        - \"50\"\n        volumeMounts:\n        - name: data-volume\n          mountPath: /var/lib/sqlite-otel-collector\n        - name: log-volume\n          mountPath: /var/log/sqlite-otel\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"200m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 4318\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 4318\n          initialDelaySeconds: 10\n          periodSeconds: 10\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: sqlite-otel-data-pvc\n      - name: log-volume\n        emptyDir: {}\n</code></pre>"},{"location":"deployment/#edge-deployment","title":"Edge Deployment","text":""},{"location":"deployment/#iot-and-edge-computing","title":"IoT and Edge Computing","text":"<p>For resource-constrained edge environments:</p> <pre><code># Minimal configuration for edge deployment\nsqlite-otel \\\n  -port 4318 \\\n  -db-path /data/telemetry.db \\\n  -log-max-size 5 \\\n  -log-max-backups 1 \\\n  -log-max-age 3\n</code></pre>"},{"location":"deployment/#docker-for-edge","title":"Docker for Edge","text":"<pre><code># Edge deployment with minimal resources\ndocker run -d \\\n  --name sqlite-otel-edge \\\n  --restart unless-stopped \\\n  --memory=64m \\\n  --cpus=0.5 \\\n  -p 4318:4318 \\\n  -v edge-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -log-max-size 5 \\\n  -log-max-backups 1\n</code></pre>"},{"location":"deployment/#high-availability","title":"High Availability","text":""},{"location":"deployment/#load-balancer-configuration","title":"Load Balancer Configuration","text":"<p>While SQLite OTEL Collector instances can't share a database, you can load balance across multiple instances:</p> <pre><code># nginx.conf\nupstream sqlite_otel_backend {\n    server 10.1.1.10:4318;\n    server 10.1.1.11:4318;\n    server 10.1.1.12:4318;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://sqlite_otel_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"deployment/#multi-instance-deployment","title":"Multi-Instance Deployment","text":"<p>Deploy multiple collectors for different services or regions:</p> <pre><code># Service A collector\ndocker run -d --name sqlite-otel-service-a \\\n  -p 4318:4318 \\\n  -v service-a-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Service B collector\ndocker run -d --name sqlite-otel-service-b \\\n  -p 4319:4318 \\\n  -v service-b-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n</code></pre>"},{"location":"deployment/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Health check script\n#!/bin/bash\nif curl -f http://localhost:4318/health &gt; /dev/null 2&gt;&amp;1; then\n    echo \"SQLite OTEL Collector is healthy\"\n    exit 0\nelse\n    echo \"SQLite OTEL Collector is unhealthy\"\n    exit 1\nfi\n</code></pre>"},{"location":"deployment/#log-monitoring","title":"Log Monitoring","text":"<pre><code># Monitor logs for errors\ntail -f /var/log/sqlite-otel-collector.log | grep -i error\n\n# Or for systemd\njournalctl -u sqlite-otel-collector -f | grep -i error\n</code></pre>"},{"location":"deployment/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Monitor resource usage\nps aux | grep sqlite-otel\ndu -sh /var/lib/sqlite-otel-collector/\n</code></pre>"},{"location":"deployment/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/#database-backup","title":"Database Backup","text":"<pre><code># Create backup script\n#!/bin/bash\nBACKUP_DIR=\"/backup/sqlite-otel\"\nDB_PATH=\"/var/lib/sqlite-otel-collector/otel-collector.db\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\nsqlite3 \"$DB_PATH\" \".backup $BACKUP_DIR/backup_$DATE.db\"\ngzip \"$BACKUP_DIR/backup_$DATE.db\"\n\n# Keep only last 7 days of backups\nfind \"$BACKUP_DIR\" -name \"backup_*.db.gz\" -mtime +7 -delete\n</code></pre>"},{"location":"deployment/#automated-backup-with-cron","title":"Automated Backup with Cron","text":"<pre><code># Add to crontab\n0 2 * * * /opt/scripts/backup-sqlite-otel.sh\n</code></pre>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#network-security","title":"Network Security","text":"<pre><code># Firewall configuration (UFW)\nsudo ufw allow from 10.0.0.0/8 to any port 4318\nsudo ufw deny 4318\n\n# Or iptables\niptables -A INPUT -s 10.0.0.0/8 -p tcp --dport 4318 -j ACCEPT\niptables -A INPUT -p tcp --dport 4318 -j DROP\n</code></pre>"},{"location":"deployment/#file-permissions","title":"File Permissions","text":"<pre><code># Secure file permissions\nsudo chmod 600 /var/lib/sqlite-otel-collector/otel-collector.db\nsudo chown sqlite-otel:sqlite-otel /var/lib/sqlite-otel-collector/otel-collector.db\n</code></pre>"},{"location":"deployment/#tls-termination","title":"TLS Termination","text":"<p>Use a reverse proxy for TLS:</p> <pre><code>server {\n    listen 443 ssl;\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:4318;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-issues","title":"Common Issues","text":"<p>Service won't start: <pre><code># Check service status\nsudo systemctl status sqlite-otel-collector\nsudo journalctl -u sqlite-otel-collector\n\n# Check file permissions\nls -la /var/lib/sqlite-otel-collector/\n</code></pre></p> <p>Database corruption: <pre><code># Check database integrity\nsqlite3 /var/lib/sqlite-otel-collector/otel-collector.db \"PRAGMA integrity_check;\"\n\n# Restore from backup if needed\ncp /backup/sqlite-otel/backup_latest.db /var/lib/sqlite-otel-collector/otel-collector.db\n</code></pre></p> <p>High resource usage: <pre><code># Check database size\ndu -sh /var/lib/sqlite-otel-collector/\n\n# Optimize database\nsqlite3 /var/lib/sqlite-otel-collector/otel-collector.db \"VACUUM;\"\n</code></pre></p>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#database-optimization","title":"Database Optimization","text":"<pre><code>-- Run periodically to optimize\nPRAGMA optimize;\nVACUUM;\nANALYZE;\n\n-- Check database stats\n.dbinfo\n</code></pre>"},{"location":"deployment/#resource-limits","title":"Resource Limits","text":"<pre><code># Systemd resource limits\nsudo systemctl edit sqlite-otel-collector\n\n[Service]\nMemoryLimit=1G\nCPUQuota=50%\n</code></pre>"},{"location":"deployment/#see-also","title":"See Also","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Command-line options</li> <li>Quick Start - Getting started guide</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>OS: Linux, macOS, or Windows</li> <li>Memory: Minimum 64MB RAM</li> <li>Storage: 10MB for binary + space for telemetry data</li> <li>Network: Port 4318 (configurable)</li> </ul>"},{"location":"installation/#binary-installation","title":"Binary Installation","text":""},{"location":"installation/#linux","title":"Linux","text":"<pre><code># AMD64\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-linux-amd64\nchmod +x sqlite-otel-linux-amd64\nsudo mv sqlite-otel-linux-amd64 /usr/local/bin/sqlite-otel\n\n# ARM64\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-linux-arm64\nchmod +x sqlite-otel-linux-arm64\nsudo mv sqlite-otel-linux-arm64 /usr/local/bin/sqlite-otel\n</code></pre>"},{"location":"installation/#macos","title":"macOS","text":"<pre><code># Intel\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-darwin-amd64\nchmod +x sqlite-otel-darwin-amd64\nsudo mv sqlite-otel-darwin-amd64 /usr/local/bin/sqlite-otel\n\n# Apple Silicon\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-darwin-arm64\nchmod +x sqlite-otel-darwin-arm64\nsudo mv sqlite-otel-darwin-arm64 /usr/local/bin/sqlite-otel\n</code></pre>"},{"location":"installation/#docker-installation","title":"Docker Installation","text":"<p>Recommended for Production</p> <p>Docker provides the easiest deployment method with built-in security and isolation.</p> <pre><code># Pull latest development image\ndocker pull ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Run with default settings\ndocker run -d --name sqlite-otel -p 4318:4318 \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Run with persistent storage\ndocker run -d --name sqlite-otel -p 4318:4318 \\\n  -v sqlite-otel-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n</code></pre>"},{"location":"installation/#package-installation","title":"Package Installation","text":""},{"location":"installation/#debianubuntu-deb","title":"Debian/Ubuntu (.deb)","text":"<pre><code># Download and install\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector_amd64.deb\nsudo dpkg -i sqlite-otel-collector_amd64.deb\n\n# Start service\nsudo systemctl enable --now sqlite-otel-collector\n</code></pre>"},{"location":"installation/#rhelcentosfedora-rpm","title":"RHEL/CentOS/Fedora (.rpm)","text":"<pre><code># Download and install\nwget https://github.com/RedShiftVelocity/sqlite-otel/releases/latest/download/sqlite-otel-collector-amd64.rpm\nsudo rpm -ivh sqlite-otel-collector-amd64.rpm\n\n# Start service\nsudo systemctl enable --now sqlite-otel-collector\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify the collector is working:</p> <pre><code># Check version\nsqlite-otel --version\n\n# Test health endpoint\ncurl http://localhost:4318/health\n</code></pre> <p>Installation Complete</p> <p>Your SQLite OTEL Collector is now ready to receive telemetry data!</p> <p>Next: Quick Start \u2192</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get your SQLite OTEL Collector up and running in under 5 minutes.</p>"},{"location":"quickstart/#step-1-start-the-collector","title":"Step 1: Start the Collector","text":"Docker (Recommended)BinaryService <pre><code># Start the collector\ndocker run -d \\\n  --name sqlite-otel \\\n  -p 4318:4318 \\\n  -v sqlite-otel-data:/var/lib/sqlite-otel-collector \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest\n\n# Verify it's running\ndocker logs sqlite-otel\n</code></pre> <pre><code># Start the collector (runs in foreground)\nsqlite-otel\n\n# Or run in background\nsqlite-otel &amp;\n</code></pre> <pre><code># If installed via package manager\nsudo systemctl start sqlite-otel-collector\nsudo systemctl status sqlite-otel-collector\n</code></pre>"},{"location":"quickstart/#step-2-verify-collector-is-running","title":"Step 2: Verify Collector is Running","text":"<pre><code># Test health endpoint\ncurl http://localhost:4318/health\n\n# Expected response: 200 OK\n</code></pre>"},{"location":"quickstart/#step-3-send-test-data","title":"Step 3: Send Test Data","text":""},{"location":"quickstart/#send-a-test-trace","title":"Send a Test Trace","text":"<pre><code>curl -X POST http://localhost:4318/v1/traces \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resourceSpans\": [{\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"service.name\",\n            \"value\": {\"stringValue\": \"test-service\"}\n          }\n        ]\n      },\n      \"scopeSpans\": [{\n        \"spans\": [{\n          \"traceId\": \"0123456789abcdef0123456789abcdef\",\n          \"spanId\": \"0123456789abcdef\",\n          \"name\": \"test-span\",\n          \"kind\": 1,\n          \"startTimeUnixNano\": \"1640995200000000000\",\n          \"endTimeUnixNano\": \"1640995201000000000\"\n        }]\n      }]\n    }]\n  }'\n</code></pre>"},{"location":"quickstart/#send-test-metrics","title":"Send Test Metrics","text":"<pre><code>curl -X POST http://localhost:4318/v1/metrics \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"resourceMetrics\": [{\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"service.name\", \n            \"value\": {\"stringValue\": \"test-service\"}\n          }\n        ]\n      },\n      \"scopeMetrics\": [{\n        \"metrics\": [{\n          \"name\": \"test_counter\",\n          \"description\": \"A test counter metric\",\n          \"unit\": \"1\",\n          \"sum\": {\n            \"dataPoints\": [{\n              \"attributes\": [],\n              \"asInt\": \"42\",\n              \"timeUnixNano\": \"1640995200000000000\"\n            }],\n            \"aggregationTemporality\": 2,\n            \"isMonotonic\": true\n          }\n        }]\n      }]\n    }]\n  }'\n</code></pre>"},{"location":"quickstart/#step-4-query-your-data","title":"Step 4: Query Your Data","text":"<p>The collector stores all data in SQLite. You can query it directly:</p> <pre><code># Access the SQLite database\nsqlite3 /var/lib/sqlite-otel-collector/otel-collector.db\n\n# Or if running locally\nsqlite3 ~/.local/share/sqlite-otel/otel-collector.db\n</code></pre>"},{"location":"quickstart/#sample-queries","title":"Sample Queries","text":"<pre><code>-- List all traces\nSELECT trace_id, span_id, name, service_name \nFROM spans \nORDER BY start_time DESC \nLIMIT 10;\n\n-- List all metrics\nSELECT name, value, timestamp, service_name \nFROM metrics \nORDER BY timestamp DESC \nLIMIT 10;\n\n-- Count spans by service\nSELECT service_name, COUNT(*) as span_count \nFROM spans \nGROUP BY service_name;\n</code></pre>"},{"location":"quickstart/#step-5-configure-your-applications","title":"Step 5: Configure Your Applications","text":"<p>Point your OpenTelemetry-instrumented applications to send data to the collector:</p> Environment VariablesGo SDKPython SDK <pre><code>export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n</code></pre> <pre><code>import \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n\nexporter, err := otlptracehttp.New(\n    context.Background(),\n    otlptracehttp.WithEndpoint(\"http://localhost:4318\"),\n    otlptracehttp.WithInsecure(),\n)\n</code></pre> <pre><code>from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\n\nexporter = OTLPSpanExporter(\n    endpoint=\"http://localhost:4318/v1/traces\"\n)\n</code></pre>"},{"location":"quickstart/#common-configuration","title":"Common Configuration","text":""},{"location":"quickstart/#custom-port","title":"Custom Port","text":"<pre><code># Run on different port\nsqlite-otel -port 9999\n\n# Docker with custom port\ndocker run -d -p 9999:9999 \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -port 9999\n</code></pre>"},{"location":"quickstart/#custom-database-location","title":"Custom Database Location","text":"<pre><code># Run with custom database path\nsqlite-otel -db-path ./my-telemetry.db\n\n# Docker with custom database\ndocker run -d -p 4318:4318 \\\n  -v $(pwd)/data:/data \\\n  ghcr.io/redshiftvelocity/sqlite-otel:latest \\\n  -db-path /data/telemetry.db\n</code></pre>"},{"location":"quickstart/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <p>Port already in use: Change the port with <code>-port 4319</code> or stop other services</p> <p>Permission denied: Make sure the user has write access to the database directory</p> <p>Connection refused: Check if the collector is running and firewall settings</p> <pre><code># Check if collector is running\ncurl -f http://localhost:4318/health || echo \"Collector not responding\"\n\n# Check Docker logs\ndocker logs sqlite-otel\n\n# Check systemd logs\nsudo journalctl -u sqlite-otel-collector -f\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide - Customize collector behavior</li> <li>CLI Reference - All command-line options</li> <li>Deployment Guide - Production deployment strategies</li> </ul> <p>You're Ready!</p> <p>Your SQLite OTEL Collector is now collecting telemetry data. Start sending data from your applications!</p>"}]}